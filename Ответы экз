
1.	Понятие жизненный цикл ПО. Определение. Основные модели жизненного цикла (каскадная, итерационная, V-образная и т.д.).
Жизненный цикл программного обеспечения (Software Life Cycle Model) — это период времени, который начинается с момента принятия решения о создании программного продукта и заканчивается в момент его полного изъятия из эксплуатации. Этот цикл — процесс построения и развития ПО.

Каскадная (водопадная) - модель процесса разработки программного обеспечения, жизненный цикл которой выглядит как поток, последовательно проходящий фазы анализа требований, проектирования. реализации, тестирования, интеграции и поддержки.

Итерационная - подразумевает разработку программного обеспечения с линейной последовательностью стадий, но в несколько инкрементов (версий), т.е. с запланированным улучшением продукта за все время пока Жизненный цикл разработки ПО не подойдет к окончанию.

V-образная модель - это улучшенная версия классической каскадной модели. Здесь на каждом этапе происходит контроль текущего процесса, для того чтобы убедится в возможности перехода на следующий уровень. В этой модели тестирование начинается еще со стадии написания требований, причем для каждого последующего этапа предусмотрен свой уровень тестового покрытия.  

Спиральная модель: Жизненный цикл — на каждом витке спирали выполняется создание очередной версии продукта, уточняются требования проекта, определяется его качество и планируются работы следующего витка. Особое внимание уделяется начальным этапам разработки — анализу и проектированию, где реализуемость тех или иных технических решений проверяется и обосновывается посредством создания прототипов.  

Гибкая модель - обобщающий термин для целого ряда подходов и практик, основанных на ценностях Манифеста гибкой разработки программного обеспечения и 12 принципах, лежащих в его основе.
(Манифест гибкой разработки программного обеспечения (англ. Agile Manifesto) — основной документ, содержащий описание ценностей и принципов гибкой разработки программного обеспечения, разработанный в феврале 2001 года[1] на встрече 17 независимых практиков нескольких методик программирования, именующих себя «Agile Alliance»[2].)

2.	Понятие «качество ПО»
Качество ПО – способность программного продукта при заданных условиях удовлетворять установленным или предпологаемым потребностям (ISO/IEC 25000:2014)
Качество ПО – весь объем признаков и характеристик программ, который отностится к их способности удовлетворять установленным или предпологаемым потребностям(ГОСТ Р ИСО/МЭК 9126-93, ISO 8402:94)
Тут тип два определения по Исо и по госту

3.	Понятие «тестирование ПО». Определение, назначение, место в жизненном цикле.
Тестирование ПО - процесс исследования, испытания программного продукта, имеющий своей целью проверку соответствия между реальным поведением программы и её ожидаемым поведением на конечном наборе тестов, выбранных определённым образом(ISO/IEC TR 19759:2005)
Место в жизненном цикле зависит от случая к случаю, в зависимости от используемой модели по которой строится весь процесс разработки программного обеспечения.

4.	Понятия «дефект», «ошибка», «сбой», «отказ».
Дефектом – называется неисправность в программном обеспечении.
Ошибка – действия пользователя приводящие к неверному результату.
Сбой – отклонение программного обеспечения от  ожидаемого результата.
Отказ – невыполнение программным обеспечением функций которые пользователь ожидает от него. 

5.	Требования к ПО, виды требований (заданные, наследуемые, подразумеваемые).
Требования к ПО – совокупность утверждений относительно атрибутов, свойств или качеств программного обеспечении, подлежащих реализации.
Требования должны быть: полными, корректными, осуществимыми, необходимыми, приоритизированными, недвусмысленными, проверяемыми, согласованными и отслеживаемыми.
Заданное требование – совокупность нормативной документации, такие как регламенты, стандарты, технические задания.
Наследуемые требования – требования возникающие в процессе разработки программного обеспечения.
Подразумеваемые – требования которые полмолчанию должен соблюдать квалифицированный специалист без договоренностей между выполняющей стороной и заказчиком.

6.	Понятие «дефект». Градация важности дефектов. Жизненный цикл дефекта.
Дефектом – называется неисправность в программном обеспечении.
Критическая важность – существование дефекта приводит к масштабным последствиям катастрофического характера Например потеря данных, раскрытие конф. Информации, нарушение ключевой функциональности приложения.
Высокая важность - существование дефекта приносит ощутимые неудобства многим пользователям в рамках их типичной деятельности, например: недоступность вставки из буфера обмена, неработоспособность общепринятых клавиатурных комбинаций, необходимость перезапуска приложения при выполнении типичных сценариев работы.
Средняя важность - существование дефекта слабо влияет на типичные сценарии работы пользователей, и/или существует обходной путь достижения цели, например: диалоговое окно не закрывается автоматически после нажатия кнопок «OK»/«Cancel», при распечатке нескольких документов подряд не сохраняется значение поля «Двусторонняя печать», перепутаны направления сортировок по некоему полю таблицы.
Низкая важность - существование дефекта редко обнаруживается незначительным процентом пользователей и (почти) не влияет на их работу, например: опечатка в глубоко вложенном пункте меню настроек, некое окно сразу при отображении расположено неудобно (нужно перетянуть его в удобное место), неточно отображается время до завершения операции копирования файлов.

7.	Виды тестовой документации.
Тестовая стратегия - описывает глобально, что будет проходить во время тестирования, регламенты, правила, нюансы тестирования.
Тест план  - документ, который призван описать весь объем работ по тестированию в текущем проекте. Он позволяет избежать части типовых ошибок и рисков, возникающих в организационном процессе. Тест-план описывает: что и как мы планируем протестировать, что не планируем, критерии начала, конца и прерывания тестирования, какое необходимо оборудование и компетенции, какие у нас есть зоны ответственности и пр.
Тест-комплект (тестовый набор из тест-кейсов) – документ который содержит в себе набор тестов для проверки смежной функциональности. Составляется вокруг бизнес-логики.
Тест-репорт – отчет о законченном тестировании, общий вид репорта: что было выполнено, что собираюсь сделать, что мне сейчас мешает.

8.	Виды тестирования.
По объекту тестирования: 
•Функциональное тестирование (functional testing) 
•Нагрузочное тестирование (Тестирование производительности (perfomance/stress testing) Тестирование стабильности (stability/load testing)) 
•Тестирование удобства использования (usability testing) 
•Тестирование интерфейса пользователя (UI testing) 
•Тестирование безопасности (security testing) 
•Тестирование локализации (localization testing) 
•Тестирование совместимости (compatibility testing)
По знанию системы: 
• Тестирование чёрного ящика (black box) 
• Тестирование белого ящика (white box) 
• Тестирование серого ящика (gray box)
По степени автоматизированности: 
• Ручное тестирование (manual testing) 
• Автоматизированное тестирование (automated testing) 
• Полуавтоматизированное тестирование (semiautomated testing)
По степени изолированности компонентов: 
• Компонентное (модульное) тестирование (component/unit testing) 
• Интеграционное тестирование (integration testing) 
• Системное тестирование (system/end-to-end testing)
По времени проведения тестирования: 
• Альфа тестирование (alpha testing) (Тестирование при приёмке (smoke testing)  Тестирование новых функциональностей (new feature testing)  Регрессионное тестирование (regression testing)  Тестирование при сдаче (acceptance testing)) 
• Бета тестирование (beta testing)
По признаку позитивности сценариев: 
• Позитивное тестирование (positive testing) 
• Негативное тестирование (negative testing) 
По степени подготовленности к тестированию: 
• Тестирование по документации (formal testing) 
• Эд Хок (интуитивное) тестирование (ad hoc testing)
